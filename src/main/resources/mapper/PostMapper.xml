<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.9//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.acn.dao.PostMapper">

    <resultMap id="postMap" type="com.acn.bean.view.Post">
        <result property="userAvatar" column="avatar"/>
        <result property="username" column="name"/>
        <result property="title" column="title"/>
        <result property="text" column="text"/>
        <result property="createtime" column="createTime"/>
        <result property="userId" column="userid"/>
        <result property="postId" column="postid"/>
        <result property="replyCount" column="replyCount"/>
        <result property="flag" column="flag"/>
    </resultMap>

    <resultMap id="postEcharts" type="com.acn.bean.view.Post">
        <result property="postId" column="id"/>
        <result property="title" column="title"/>
        <result property="replyCount" column="replyCount"/>
    </resultMap>


    <insert id="addPost" parameterType="com.acn.bean.Post">
        insert into post (title, text, userId, createTime, flag)
        values (#{title},#{text},#{userId},#{createtime},#{flag});
    </insert>


    <select id="selectAllPostsByUserId" resultMap="postMap">
        SELECT user.id AS userid, post.id AS postid, user.avatar, user.`name`, post.title, post.text, post.createTime,
               COUNT(`comment`.id) AS replyCount
        FROM post
                 LEFT JOIN user ON post.userId = user.id
                 LEFT JOIN `comment` ON post.id = `comment`.postId
        where user.id =  #{userId} and post.flag = 1
        GROUP BY user.id, post.id, user.avatar, user.`name`, post.title, post.text, post.createTime

    </select>

    <select id="postsCount" resultType="int">
        select count(*)
        from post
        where flag = 1;
    </select>

    <select id="postsCountByUser" parameterType="int" resultType="java.lang.Integer">
        select count(*)
        from post
        where post.userId = #{userId}
          and flag = 1
    </select>

    <select id="selectPostById" resultMap="postMap">
        select user.id as userid, post.id as postid, user.avatar, user.`name`, post.title, post.text, post.createTime
        from post
                 LEFT JOIN user on post.userId = user.id
        where post.id = #{id}
          and flag = 1
    </select>

    <select id="selectPostByPaging" resultMap="postMap">
        SELECT user.id             AS userid,
               post.id             AS postid,
               user.avatar,
               user.`name`,
               post.title,
               post.text,
               post.createTime,
               COUNT(`comment`.id) AS replyCount
        FROM post
                 LEFT JOIN user ON post.userId = user.id
                 LEFT JOIN `comment` ON post.id = `comment`.postId
        where post.flag = 1
        GROUP BY user.id, post.id, user.avatar, user.`name`, post.title, post.text, post.createTime
        order by post.createTime desc
        limit #{page}, #{pageSize}
    </select>


    <select id="selectPostByLike" resultMap="postMap">
        SELECT user.id             AS userid,
               post.id             AS postid,
               user.avatar,
               user.`name`,
               post.title,
               post.text,
               post.createTime,
               COUNT(`comment`.id) AS replyCount
        FROM post
                 LEFT JOIN user ON post.userId = user.id
                 LEFT JOIN `comment` ON post.id = `comment`.postId
        where (text like CONCAT('%', #{text}, '%') or
              title like CONCAT('%', #{text}, '%'))and
              post.flag = 1
        GROUP BY user.id, post.id, user.avatar, user.`name`, post.title, post.text, post.createTime
    </select>

    <select id="adminSelectPostByLike" resultMap="postMap">
        SELECT user.id             AS userid,
               post.id             AS postid,
               user.`name`,
               post.flag,
               post.title,
               post.text,
               post.createTime,
               COUNT(`comment`.id) AS replyCount
        FROM post
                 LEFT JOIN user ON post.userId = user.id
                 LEFT JOIN `comment` ON post.id = `comment`.postId
        where (text like CONCAT('%', #{text}, '%') or
               title like CONCAT('%', #{text}, '%'))and
            post.flag != -1
        GROUP BY user.id, post.id, user.avatar, user.`name`, post.title, post.text, post.createTime
    </select>

    <select id="selectLastPost" resultType="java.lang.Integer">
        select post.id
        from post
        where post.userId = ${userId}
        order by createTime desc
    </select>


    <select id="selectAllAnnouncements" resultMap="postMap">
        select post.id AS postid, `user`.`name`, post.title,post.text, post.createTime
        from post
                 LEFT JOIN user ON post.userId = user.id
        where flag = -1;
    </select>

    <select id="selectAllVisiblePosts" resultMap="postEcharts">
        select post.id, post.title, count(post.id) AS replyCount
        from post
                 left join rainbowzh.comment c on post.id = c.postId
        where post.flag = 1
        group by post.id
    </select>
    <select id="selectAllPost" resultMap="postMap">
        SELECT user.id             AS userid,
               post.id             AS postid,
               user.`name`,
               post.title,
               post.text,
               post.createTime,
               COUNT(`comment`.id) AS replyCount,
               post.flag
        FROM post
                 LEFT JOIN user ON post.userId = user.id
                 LEFT JOIN `comment` ON post.id = `comment`.postId
        where post.flag != -1
        GROUP BY user.id, post.id, user.avatar, user.`name`, post.title, post.text, post.createTime
        limit #{page}, #{pageSize}
    </select>

    <delete id="ADMIN_deletePostById">
        delete
        from post
        where id = #{postId};
    </delete>

    <update id="changeFlag">
        update post
        set flag = #{flag}
        where id = #{postId};
    </update>

    <update id="updatePost">
        update post
        <set>
            <if test="title!=null and title!=''">
                title = #{title},
            </if>
            <if test="text!=null and text!=''">
                text = #{text},
            </if>
        </set>
        where post.id = #{id};
    </update>
</mapper>